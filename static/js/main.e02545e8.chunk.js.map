{"version":3,"sources":["assets/TheRightClickTransparent.png","components/Navbar/Navbar.js","components/Header/Header.js","components/RightLinkManagementOpt/RightLinkManagementOpt.js","components/CustomInput/CustomInputs.js","components/Profile/Profile.js","components/AddLink/AddLink.js","components/SocialLinks/SocialLinks.js","components/RightLinks/RightLinks.js","components/Main/Main.js","components/Home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["StickyBar","position","style","justifyContent","width","boxShadow","zIndex","padding","alignItems","background","textAlign","href","Image","src","Logo","size","centered","display","Header","Navbar","RightLinkManagementOpt","handleEditClick","editRightLink","handleSaveClick","saveRightLink","Button","icon","labelPosition","color","disabled","onClick","Icon","name","StandardInput","field","values","setValue","Input","defaultValue","RightLinkStandardInput","console","log","value","SelectInput","options","Select","RightLinkSelectInput","Profile","data","initalVals","setData","title","titleColor","backgroundImage","image","backgroundImageLink","imageLink","backgroudColor","profilePicture","useState","setValues","Segment","className","content","key","text","AddLink","collection","linkGroup","addSocialLink","iconName","link","secondaryColor","surrounded","surroundedInColor","addRightLinkGroup","addRightLink","group","type","linkSpaced","typeAction","internal","featured","featuredText","featuredTimerDate","featuredTimerText","featuredColor","featuredAltStyle","pinned","mainMedia","additionalLinks","colorOveride","fontColor","colored","buttonColor","bannerSide","additionalStyle","modalAlternativeText","removed","bioContent","socialLinksCopy","socialLinks","push","rightLinksCopy","rightLinks","links","rightLinkGroupsCopy","groups","SocialLinks","activeIndex","setActiveIndex","presetColorOptions","presetBool","handleClick","e","titleProps","index","Accordion","styled","map","i","Title","active","Content","RightLinks","showgroup","setShowGroup","rightLinksFilter","setRightLinksFilters","presetBoolOptions","presetSideOptions","presetTypeOptions","handleGroupClick","children","Label","as","Divider","filter","Object","keys","j","includes","Main","panes","menuItem","render","Tab","Pane","menu","fluid","vertical","tabular","Home","setEditRightLink","setSaveRightLink","userData","Grid","columns","Row","previous","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e02545e8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/TheRightClickTransparent.45a3cb44.png\";","import React from 'react';\nimport { Image, Icon } from 'semantic-ui-react';\nimport Logo from '../../assets/TheRightClickTransparent.png';\nimport { Link } from 'react-router-dom';\n// import useAuthUser from '../../../Firebase/useAuthUser';\n\nconst LoggedInButtons = () => (\n    <Link to=\"/profile\">\n        <Icon\n            name=\"user circle\"\n            inverted\n            size=\"big\"\n            background=\"white\"\n            style={{ color: '#3972f4', margin: '0 1em' }}\n        />\n    </Link>\n);\n\nconst LoggedOutButtons = () => (\n    <>\n        <Link\n            to=\"/login\"\n            style={{\n                margin: '0 0 0 5%',\n                padding: '.5em',\n                border: '1.5px solid #3972f4',\n                color: '#3972f4',\n                borderRadius: '6px',\n                fontWeight: '600',\n                width: '100px',\n            }}\n        >\n            Log In\n        </Link>\n        <Link\n            to=\"/signup\"\n            style={{\n                margin: '0 0 0 5%',\n                padding: '.5em',\n                background: '#3972f4',\n                color: 'white',\n                borderRadius: '6px',\n                fontWeight: '600',\n                width: '100px',\n            }}\n        >\n            Sign Up\n        </Link>\n    </>\n);\n\nconst StickyBar = ({ position }) => {\n    // const [authUser, loading] = useAuthUser();\n\n    return (\n        <div\n            style={{\n                justifyContent: 'space-between',\n                width: '100%',\n                boxShadow: '0 0 1rem 0 rgba(100,110,140,.4)',\n                zIndex: '2',\n                padding: '1em',\n                alignItems: 'center',\n                background: 'white',\n                textAlign: 'center',\n            }}\n        >\n            <a href=\"/\">\n                <Image src={Logo} size=\"medium\" centered />\n            </a>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'flex-end',\n                    width: '60%',\n                }}\n            >\n                {/* This is where we can put buttons for the sticky nav */}\n                {/* {loading ? null : !!authUser ? (\n          <LoggedInButtons />\n        ) : (\n          <LoggedOutButtons />\n        )} */}\n            </div>\n        </div>\n    );\n};\n\nexport default StickyBar;\n","import React from 'react';\nimport Navbar from '../Navbar/Navbar';\n\nconst Header = () => {\n    return <Navbar />;\n};\n\nexport default Header;\n","import React from 'react';\nimport { Button, Icon } from 'semantic-ui-react';\n\nconst RightLinkManagementOpt = ({\n    handleEditClick,\n    editRightLink,\n    handleSaveClick,\n    saveRightLink,\n}) => {\n    return (\n        <>\n            <Button\n                icon\n                labelPosition=\"left\"\n                color=\"blue\"\n                disabled={editRightLink}\n                onClick={handleEditClick}\n            >\n                <Icon name=\"edit outline\" />\n                Edit\n            </Button>\n            <Button\n                icon\n                labelPosition=\"right\"\n                color=\"green\"\n                disabled={saveRightLink}\n                onClick={handleSaveClick}\n            >\n                Save\n                <Icon name=\"save outline\" />\n            </Button>\n        </>\n    );\n};\n\nexport default RightLinkManagementOpt;\n","import React from 'react';\nimport { Input, Select } from 'semantic-ui-react';\n\nexport const StandardInput = ({ field, values, setValue }) => {\n    return (\n        <Input\n            // label={{ icon: 'asterisk', color: 'teal' }}\n            // labelPosition=\"left corner\"\n            defaultValue={values[field] || ''}\n        />\n    );\n};\n\nexport const RightLinkStandardInput = ({ field, values, setValue }) => {\n    console.log('field', field, 'value', values);\n    return (\n        <Input\n            // label={{ icon: 'asterisk', color: 'teal' }}\n            // labelPosition=\"left corner\"\n            defaultValue={values[field].value || ''}\n        />\n    );\n};\n\nexport const SelectInput = ({ field, values, setValue, options }) => {\n    return (\n        <Select\n            // label={{ icon: 'asterisk', color: 'teal' }}\n            // labelPosition=\"left corner\"\n            options={options}\n            defaultValue={values[field] || ''}\n        />\n    );\n};\n\nexport const RightLinkSelectInput = ({ field, values, setValue, options }) => {\n    return (\n        <Select\n            // label={{ icon: 'asterisk', color: 'teal' }}\n            // labelPosition=\"left corner\"\n            options={options}\n            defaultValue={values[field].value || ''}\n        />\n    );\n};\n","import React, { useState } from 'react';\nimport { Segment, Header, Input } from 'semantic-ui-react';\n// import { SwatchesPicker } from 'react-color';\nimport { StandardInput, SelectInput } from '../CustomInput/CustomInputs';\n// import { BACKGROUND, TITLE, PROFILE_PIC } from '../../assets/data';\n// import './main.css';\n\nconst Profile = ({ editRightLink, data, setData }) => {\n    const initalVals = {\n        title: data.title.title,\n        titleColor: data.title.color,\n        backgroundImage: data.background.image,\n        backgroundImageLink: data.background.imageLink,\n        backgroudColor: data.background.color,\n        profilePicture: data.profilePicture,\n    };\n\n    const presetColorOptions = [\n        { key: 'red', text: 'red', value: 'red' },\n        { key: 'orange', text: 'orange', value: 'orange' },\n        { key: 'yellow', text: 'yellow', value: 'yellow' },\n        { key: 'olive', text: 'olive', value: 'olive' },\n        { key: 'green', text: 'green', value: 'green' },\n        { key: 'teal', text: 'teal', value: 'teal' },\n        { key: 'blue', text: 'blue', value: 'blue' },\n        { key: 'violet', text: 'violet', value: 'violet' },\n        { key: 'purple', text: 'purple', value: 'purple' },\n        { key: 'pink', text: 'pink', value: 'pink' },\n        { key: 'brown', text: 'brown', value: 'brown' },\n        { key: 'grey', text: 'grey', value: 'grey' },\n        { key: 'black', text: 'black', value: 'black' },\n        { key: 'custom', text: 'custom', value: 'custom' },\n    ];\n\n    const presetBool = [\n        { key: 'true', text: 'true', value: 'true' },\n        { key: 'false', text: 'false', value: 'false' },\n    ];\n\n    const [values, setValues] = useState(initalVals);\n\n    return (\n        <Segment className=\"Profile\">\n            <Header content=\"Profile\" />\n            <Segment>\n                <pre>\n                    <b>Title:</b>{' '}\n                    {editRightLink ? (\n                        <StandardInput\n                            field=\"title\"\n                            values={values}\n                            setValues={setValues}\n                        />\n                    ) : initalVals.title ? (\n                        initalVals.title\n                    ) : (\n                        'empty'\n                    )}\n                </pre>\n                <pre>\n                    <b>Title Color:</b>{' '}\n                    {editRightLink ? (\n                        <SelectInput\n                            field=\"titleColor\"\n                            values={values}\n                            setValues={setValues}\n                            options={presetColorOptions}\n                        />\n                    ) : initalVals.titleColor ? (\n                        initalVals.titleColor\n                    ) : (\n                        'empty'\n                    )}\n                </pre>\n            </Segment>\n            <Segment>\n                <pre>\n                    <b>Background Color:</b>{' '}\n                    {editRightLink ? (\n                        <StandardInput\n                            field=\"backgroudColor\"\n                            values={values}\n                            setValues={setValues}\n                        />\n                    ) : initalVals.backgroudColor ? (\n                        initalVals.backgroudColor\n                    ) : (\n                        'empty'\n                    )}\n                </pre>\n                <pre>\n                    <b>Background Image:</b>{' '}\n                    {editRightLink ? (\n                        <SelectInput\n                            field=\"backgroundImage\"\n                            values={values}\n                            setValues={setValues}\n                            options={presetBool}\n                        />\n                    ) : initalVals.backgroundImage ? (\n                        initalVals.backgroundImage\n                    ) : (\n                        'empty'\n                    )}\n                </pre>\n                <pre>\n                    <b>Background Image Link:</b>{' '}\n                    {editRightLink ? (\n                        <StandardInput\n                            field=\"backgroundImageLink\"\n                            values={values}\n                            setValues={setValues}\n                        />\n                    ) : initalVals.backgroundImageLink ? (\n                        initalVals.backgroundImageLink\n                    ) : (\n                        'empty'\n                    )}\n                </pre>\n            </Segment>\n            <Segment>\n                <pre>\n                    <b>Profile Picture:</b>{' '}\n                    {editRightLink ? (\n                        <StandardInput\n                            field=\"profilePicture\"\n                            values={values}\n                            setValues={setValues}\n                        />\n                    ) : initalVals.profilePicture ? (\n                        initalVals.profilePicture\n                    ) : (\n                        'empty'\n                    )}\n                </pre>\n            </Segment>\n        </Segment>\n    );\n};\n\nexport default Profile;\n","import React from 'react';\nimport { Icon } from 'semantic-ui-react';\nimport './AddLink.css';\n\nconst AddLink = ({ collection, data, setData, linkGroup }) => {\n    const addSocialLink = {\n        name: '',\n        iconName: '',\n        link: '',\n        color: '',\n        secondaryColor: '',\n        surrounded: '',\n        surroundedInColor: '',\n    };\n\n    const addRightLinkGroup = {\n        name: 'New Group',\n        color: 'green',\n    };\n\n    const addRightLink = {\n        group: linkGroup,\n        name: {\n            type: 'text',\n            value: 'New Right Link',\n        },\n        link: {\n            type: 'text',\n            value: '',\n        },\n        linkSpaced: {\n            type: 'bool',\n            value: false,\n        },\n        type: {\n            type: 'typeSelect',\n            value: '',\n        },\n        typeAction: {\n            type: 'text',\n            value: '',\n        },\n        internal: {\n            type: 'bool',\n            value: false,\n        },\n        featured: {\n            type: 'bool',\n            value: false,\n        },\n        featuredText: {\n            type: 'text',\n            value: '',\n        },\n        featuredTimerDate: {\n            type: 'text',\n            value: '',\n        },\n        featuredTimerText: {\n            type: 'text',\n            value: '',\n        },\n        featuredColor: {\n            type: 'colorSelect',\n            value: '',\n        },\n        featuredAltStyle: {\n            type: 'text',\n            value: '',\n        },\n        pinned: {\n            type: 'bool',\n            value: false,\n        },\n        mainMedia: {\n            type: 'obj',\n            value: {},\n        },\n        additionalLinks: {\n            type: 'array',\n            value: [],\n        },\n        color: {\n            type: 'colorSelect',\n            value: '',\n        },\n        colorOveride: {\n            type: 'text',\n            value: '',\n        },\n        fontColor: {\n            type: 'colorSelect',\n            value: '',\n        },\n        colored: {\n            type: 'bool',\n            value: false,\n        },\n        buttonColor: {\n            type: 'colorSelect',\n            value: '',\n        },\n        bannerSide: {\n            type: 'sideSelect',\n            value: '',\n        },\n        additionalStyle: {\n            type: 'text',\n            value: 'longText',\n        },\n        modalAlternativeText: {\n            type: 'obj',\n            value: {\n                removed: false,\n                text: '',\n            },\n        },\n        bioContent: {\n            type: 'array',\n            value: [],\n        },\n    };\n\n    const handleClick = () => {\n        if (collection === 'socialLinks') {\n            console.log('social');\n            const socialLinksCopy = data.socialLinks.group;\n            socialLinksCopy.push(addSocialLink);\n            setData({ ...data, [data.socialLinks.group]: [socialLinksCopy] });\n        }\n        if (collection === 'rightLinks') {\n            console.log('rightlink');\n            const rightLinksCopy = data.rightLinks.links;\n            rightLinksCopy.push(addRightLink);\n            setData({\n                ...data,\n                [data.rightLinks.links]: rightLinksCopy,\n            });\n        }\n        if (collection === 'rightLinksGroups') {\n            console.log('rightlink groups');\n            const rightLinkGroupsCopy = data.rightLinks.groups;\n            rightLinkGroupsCopy.push(addRightLinkGroup);\n            setData({ ...data, [data.rightLinks.groups]: rightLinkGroupsCopy });\n        }\n    };\n\n    return (\n        <Icon\n            color=\"green\"\n            name=\"add square\"\n            size=\"big\"\n            className=\"custom\"\n            link\n            onClick={handleClick}\n        />\n    );\n};\n\nexport default AddLink;\n","import React, { useState } from 'react';\nimport { Segment, Header, Accordion, Icon } from 'semantic-ui-react';\nimport { StandardInput, SelectInput } from '../CustomInput/CustomInputs';\nimport AddLink from '../AddLink/AddLink';\n// import {\n//     // LOGO,\n//     SOCIAL_LINKS,\n// } from '../../assets/data';\nimport './socialLinks.css';\n\nconst SocialLinks = ({ editRightLink, data, setData }) => {\n    const [activeIndex, setActiveIndex] = useState();\n\n    const presetColorOptions = [\n        { key: 'red', text: 'red', value: 'red' },\n        { key: 'orange', text: 'orange', value: 'orange' },\n        { key: 'yellow', text: 'yellow', value: 'yellow' },\n        { key: 'olive', text: 'olive', value: 'olive' },\n        { key: 'green', text: 'green', value: 'green' },\n        { key: 'teal', text: 'teal', value: 'teal' },\n        { key: 'blue', text: 'blue', value: 'blue' },\n        { key: 'violet', text: 'violet', value: 'violet' },\n        { key: 'purple', text: 'purple', value: 'purple' },\n        { key: 'pink', text: 'pink', value: 'pink' },\n        { key: 'brown', text: 'brown', value: 'brown' },\n        { key: 'grey', text: 'grey', value: 'grey' },\n        { key: 'black', text: 'black', value: 'black' },\n        { key: 'custom', text: 'custom', value: 'custom' },\n    ];\n\n    const presetBool = [\n        { key: 'true', text: 'true', value: 'true' },\n        { key: 'false', text: 'false', value: 'false' },\n    ];\n\n    const handleClick = (e, titleProps) => {\n        const { index } = titleProps;\n        const newIndex = activeIndex === index ? -1 : index;\n\n        setActiveIndex(newIndex);\n    };\n\n    return (\n        <Segment className=\"social links\">\n            {console.log('data', data)}\n            <Header content=\"Social Links\" />\n            <Accordion styled>\n                {data.socialLinks.group.map((link, i) => (\n                    <div key={`social link ${i}`}>\n                        <Accordion.Title\n                            active={activeIndex === i}\n                            index={i}\n                            onClick={handleClick}\n                        >\n                            <Icon name=\"dropdown\" />\n                            {`Social Link ${i}`}\n                        </Accordion.Title>\n                        <Accordion.Content active={activeIndex === i}>\n                            <Segment>\n                                <pre>\n                                    <b>name:</b>{' '}\n                                    {editRightLink ? (\n                                        <StandardInput\n                                            field=\"name\"\n                                            values={link}\n                                            // setValues={setValues}\n                                        />\n                                    ) : link.name ? (\n                                        link.name\n                                    ) : (\n                                        'empty'\n                                    )}\n                                </pre>\n                                <pre>\n                                    <b>icon:</b>{' '}\n                                    {editRightLink ? (\n                                        <StandardInput\n                                            field=\"iconName\"\n                                            values={link}\n                                            // setValues={setValues}\n                                        />\n                                    ) : link.iconName ? (\n                                        link.iconName\n                                    ) : (\n                                        'empty'\n                                    )}\n                                </pre>\n                                <pre>\n                                    <b>link:</b>{' '}\n                                    {editRightLink ? (\n                                        <StandardInput\n                                            field=\"link\"\n                                            values={link}\n                                            // setValues={setValues}\n                                        />\n                                    ) : link.link ? (\n                                        link.link\n                                    ) : (\n                                        'empty'\n                                    )}\n                                </pre>\n                                <pre>\n                                    <b>color:</b>{' '}\n                                    {editRightLink ? (\n                                        <SelectInput\n                                            field=\"color\"\n                                            values={link}\n                                            // setValues={setValues}\n                                            options={presetColorOptions}\n                                        />\n                                    ) : link.color ? (\n                                        link.color\n                                    ) : (\n                                        'empty'\n                                    )}\n                                </pre>\n                                <pre>\n                                    <b>secondaryColor:</b>{' '}\n                                    {editRightLink ? (\n                                        <SelectInput\n                                            field=\"secondaryColor\"\n                                            values={link}\n                                            // setValues={setValues}\n                                            options={presetColorOptions}\n                                        />\n                                    ) : link.secondaryColor ? (\n                                        link.secondaryColor\n                                    ) : (\n                                        'empty'\n                                    )}\n                                </pre>\n                                <pre>\n                                    <b>surrounded:</b>{' '}\n                                    {editRightLink ? (\n                                        <SelectInput\n                                            field=\"surrounded\"\n                                            values={link}\n                                            // setValues={setValues}\n                                            options={presetBool}\n                                        />\n                                    ) : link.surrounded ? (\n                                        link.surrounded\n                                    ) : (\n                                        'empty'\n                                    )}\n                                </pre>\n                                <pre>\n                                    <b>surroundedInColor:</b>{' '}\n                                    {editRightLink ? (\n                                        <SelectInput\n                                            field=\"surroundedInColor\"\n                                            values={link}\n                                            // setValues={setValues}\n                                            options={presetBool}\n                                        />\n                                    ) : link.surroundedInColor ? (\n                                        link.surroundedInColor\n                                    ) : (\n                                        'empty'\n                                    )}\n                                </pre>\n                            </Segment>\n                        </Accordion.Content>\n                    </div>\n                ))}\n            </Accordion>\n            <AddLink\n                collection=\"socialLinks\"\n                data={data}\n                setData={setData}\n                linkGroup=\"\"\n            />\n        </Segment>\n    );\n};\n\nexport default SocialLinks;\n","import React, { useState } from 'react';\nimport {\n    Segment,\n    Header,\n    Accordion,\n    Icon,\n    Label,\n    Divider,\n} from 'semantic-ui-react';\nimport {\n    StandardInput,\n    SelectInput,\n    RightLinkStandardInput,\n    RightLinkSelectInput,\n} from '../CustomInput/CustomInputs';\nimport AddLink from '../AddLink/AddLink';\n// import { LINK_GROUP_1 } from '../../assets/data';\nimport './rightLinks.css';\n\nconst RightLinks = ({ editRightLink, data, setData }) => {\n    const [activeIndex, setActiveIndex] = useState();\n    const [showgroup, setShowGroup] = useState(false);\n    const [rightLinksFilter, setRightLinksFilters] = useState('');\n\n    const presetColorOptions = [\n        { key: 'red', text: 'red', value: 'red' },\n        { key: 'orange', text: 'orange', value: 'orange' },\n        { key: 'yellow', text: 'yellow', value: 'yellow' },\n        { key: 'olive', text: 'olive', value: 'olive' },\n        { key: 'green', text: 'green', value: 'green' },\n        { key: 'teal', text: 'teal', value: 'teal' },\n        { key: 'blue', text: 'blue', value: 'blue' },\n        { key: 'violet', text: 'violet', value: 'violet' },\n        { key: 'purple', text: 'purple', value: 'purple' },\n        { key: 'pink', text: 'pink', value: 'pink' },\n        { key: 'brown', text: 'brown', value: 'brown' },\n        { key: 'grey', text: 'grey', value: 'grey' },\n        { key: 'black', text: 'black', value: 'black' },\n        { key: 'custom', text: 'custom', value: 'custom' },\n    ];\n\n    const presetBoolOptions = [\n        { key: 'true', text: 'true', value: 'true' },\n        { key: 'false', text: 'false', value: 'false' },\n    ];\n\n    const presetSideOptions = [\n        { key: 'none', text: 'none', value: 'none' },\n        { key: 'left', text: 'left', value: 'left' },\n        { key: 'right', text: 'right', value: 'right' },\n    ];\n\n    const presetTypeOptions = [\n        { key: 'internal', text: 'internal', value: 'internal' },\n        { key: 'external', text: 'external', value: 'external' },\n        { key: 'item', text: 'item', value: 'item' },\n        {\n            key: 'still/external',\n            text: 'still/external',\n            value: 'still/external',\n        },\n        { key: 'slideshow', text: 'slideshow', value: 'slideshow' },\n        { key: 'bio', text: 'bio', value: 'bio' },\n    ];\n\n    const handleClick = (e, titleProps) => {\n        const { index } = titleProps;\n        const newIndex = activeIndex === index ? -1 : index;\n\n        setActiveIndex(newIndex);\n    };\n\n    const handleGroupClick = (e, data) => {\n        // console.log('groupState', rightLinksFilter);\n        // console.log('groupClick', data);\n        setShowGroup(true);\n        setRightLinksFilters(`${data.children[1]}`);\n    };\n\n    return (\n        <Segment className=\"LinkGroup 1\">\n            {console.log('data', data)}\n            <div>\n                {data.rightLinks.groups.map((group, i) => {\n                    return (\n                        <Label\n                            key={`group label ${i}`}\n                            as=\"a\"\n                            image\n                            className=\"linkLabels\"\n                            color={group.color}\n                            onClick={handleGroupClick}\n                        >\n                            <Icon name=\"linkify\" />\n                            {group.name}\n                        </Label>\n                    );\n                })}\n                <AddLink\n                    collection=\"rightLinksGroups\"\n                    data={data}\n                    setData={setData}\n                    linkGroup=\"\"\n                />\n            </div>\n            <Divider />\n            <Header content=\"Link Group\" />\n            {showgroup ? (\n                <>\n                    <Segment>\n                        <pre>\n                            <b>Group Name:</b>{' '}\n                            {editRightLink ? (\n                                <StandardInput\n                                    field=\"groupName\"\n                                    values={data.rightLinks.groups.filter(\n                                        (group) =>\n                                            group.name === rightLinksFilter\n                                    )}\n                                    // setValues={setValues}\n                                />\n                            ) : data.rightLinks.groups.filter(\n                                  (group) => group.name === rightLinksFilter\n                              )[0].name ? (\n                                data.rightLinks.groups.filter(\n                                    (group) => group.name === rightLinksFilter\n                                )[0].name\n                            ) : (\n                                'empty'\n                            )}\n                        </pre>\n                    </Segment>\n                    <Segment>\n                        <pre>\n                            <b>Group Color:</b>\n                            {editRightLink ? (\n                                <SelectInput\n                                    field=\"groupColor\"\n                                    values={data.rightLinks.groups.filter(\n                                        (group) =>\n                                            group.name === rightLinksFilter\n                                    )}\n                                    // setValues={setValues}\n                                    options={presetColorOptions}\n                                />\n                            ) : data.rightLinks.groups.filter(\n                                  (group) => group.name === rightLinksFilter\n                              )[0].color ? (\n                                data.rightLinks.groups.filter(\n                                    (group) => group.name === rightLinksFilter\n                                )[0].color\n                            ) : (\n                                'empty'\n                            )}\n                        </pre>\n                    </Segment>\n                    <Accordion styled>\n                        {data.rightLinks.links.map((link, i) => {\n                            return link.group === rightLinksFilter ? (\n                                <div key={`RightLink-${i}`}>\n                                    {/* <Header content={`Link ${i + 1}`} /> */}\n                                    <Accordion.Title\n                                        active={activeIndex === i}\n                                        index={i}\n                                        onClick={handleClick}\n                                    >\n                                        <Icon name=\"dropdown\" />\n                                        {`${link.name.value}`}\n                                    </Accordion.Title>\n                                    {Object.keys(link).map((key, j) => {\n                                        // console.log('link', link, 'key', key);\n                                        return (\n                                            <Accordion.Content\n                                                active={activeIndex === i}\n                                                key={`RightLink-content-${j}`}\n                                            >\n                                                <Segment>\n                                                    <pre>\n                                                        <b>{`${key}:`}</b>{' '}\n                                                        {editRightLink ? (\n                                                            link[key].type ===\n                                                            'text' ? (\n                                                                <RightLinkStandardInput\n                                                                    field={`${key}`}\n                                                                    values={\n                                                                        link\n                                                                    }\n                                                                />\n                                                            ) : link[key]\n                                                                  .type ===\n                                                              'bool' ? (\n                                                                <RightLinkStandardInput\n                                                                    field={`${key}`}\n                                                                    values={\n                                                                        link\n                                                                    }\n                                                                    options={\n                                                                        presetBoolOptions\n                                                                    }\n                                                                />\n                                                            ) : link[key]\n                                                                  .type ===\n                                                              'typeSelect' ? (\n                                                                <RightLinkStandardInput\n                                                                    field={`${key}`}\n                                                                    values={\n                                                                        link\n                                                                    }\n                                                                    options={\n                                                                        presetTypeOptions\n                                                                    }\n                                                                />\n                                                            ) : link[key]\n                                                                  .type ===\n                                                              'colorSelect' ? (\n                                                                <RightLinkSelectInput\n                                                                    field={`${key}`}\n                                                                    values={\n                                                                        link\n                                                                    }\n                                                                    options={\n                                                                        presetColorOptions\n                                                                    }\n                                                                />\n                                                            ) : link[key]\n                                                                  .type ===\n                                                              'sideSelect' ? (\n                                                                <RightLinkSelectInput\n                                                                    field={`${key}`}\n                                                                    values={\n                                                                        link\n                                                                    }\n                                                                    options={\n                                                                        presetSideOptions\n                                                                    }\n                                                                />\n                                                            ) : link[key]\n                                                                  .type ===\n                                                              'obj' ? (\n                                                                'objectComing soon'\n                                                            ) : link[key]\n                                                                  .type ===\n                                                              'array' ? (\n                                                                'arrayComming soon'\n                                                            ) : (\n                                                                'field not valid'\n                                                            )\n                                                        ) : [\n                                                              'array',\n                                                              'obj',\n                                                          ].includes(\n                                                              link[key].type\n                                                          ) ? (\n                                                            'obj or array'\n                                                        ) : link[key].value ? (\n                                                            link[key].value\n                                                        ) : (\n                                                            'empty'\n                                                        )}\n                                                    </pre>\n                                                </Segment>\n                                            </Accordion.Content>\n                                        );\n                                    })}\n                                </div>\n                            ) : (\n                                ''\n                            );\n                        })}\n                    </Accordion>\n                </>\n            ) : (\n                'Please select one from above or add a new group for your Right-Links'\n            )}\n            <div>\n                <AddLink\n                    collection=\"rightLinks\"\n                    data={data}\n                    setData={setData}\n                    linkGroup={rightLinksFilter}\n                />\n            </div>\n        </Segment>\n    );\n};\n\nexport default RightLinks;\n","import React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport ProfileSection from '../Profile/Profile';\nimport SocialLinks from '../SocialLinks/SocialLinks';\nimport RightLinks from '../RightLinks/RightLinks';\nimport './main.css';\n\nconst Main = ({ editRightLink, data, setData }) => {\n    const panes = [\n        {\n            menuItem: 'Profile',\n            render: () => (\n                <Tab.Pane>\n                    <ProfileSection\n                        editRightLink={editRightLink}\n                        data={data}\n                        setData={setData}\n                    />\n                </Tab.Pane>\n            ),\n        },\n        {\n            menuItem: 'Social Links',\n            render: () => (\n                <Tab.Pane>\n                    <SocialLinks\n                        editRightLink={editRightLink}\n                        data={data}\n                        setData={setData}\n                    />\n                </Tab.Pane>\n            ),\n        },\n        {\n            menuItem: 'Links',\n            render: () => (\n                <Tab.Pane>\n                    <RightLinks\n                        editRightLink={editRightLink}\n                        data={data}\n                        setData={setData}\n                    />\n                </Tab.Pane>\n            ),\n        },\n        {\n            menuItem: 'Preview',\n            render: () => <Tab.Pane>{/* <Preview /> */}</Tab.Pane>,\n        },\n    ];\n\n    return (\n        <div className=\"containerSize mainContainer\">\n            <Tab\n                menu={{ fluid: true, vertical: true, tabular: true }}\n                panes={panes}\n            />\n        </div>\n    );\n};\n\nexport default Main;\n","import React, { useDebugValue, useState } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport Header from '../Header/Header';\nimport RightLinkManagementOpt from '../RightLinkManagementOpt/RightLinkManagementOpt';\nimport Main from '../Main/Main';\n// import {\n//     TITLE,\n//     LOGO,\n//     PROFILE_PIC,\n//     BACKGROUND,\n//     SOCIAL_LINKS,\n//     LINK_GROUP_1,\n// } from '../../assets/data';\nimport userData from '../../assets/data.json';\nimport './Home.css';\n\nconst Home = () => {\n    const [editRightLink, setEditRightLink] = useState(false);\n    const [saveRightLink, setSaveRightLink] = useState(true);\n    const [data, setData] = useState(userData);\n\n    const handleEditClick = () => {\n        console.log('edit click');\n        setEditRightLink((previous) => !previous);\n        setSaveRightLink((previous) => !previous);\n    };\n\n    const saveData = () => {\n        setEditRightLink((previous) => !previous);\n        setSaveRightLink((previous) => !previous);\n        console.log('save Data');\n    };\n    const handleSaveClick = () => {\n        // setSaveRightLink()\n        console.log('save click');\n        saveData();\n    };\n\n    return (\n        <Grid columns={2}>\n            <Grid.Row centered>\n                <Header />\n            </Grid.Row>\n            <Grid.Row className=\"RLContentRight\">\n                <RightLinkManagementOpt\n                    handleEditClick={handleEditClick}\n                    editRightLink={editRightLink}\n                    handleSaveClick={handleSaveClick}\n                    saveRightLink={saveRightLink}\n                />\n            </Grid.Row>\n            <Grid.Row centered>\n                <Main\n                    editRightLink={editRightLink}\n                    data={data}\n                    setData={setData}\n                />\n            </Grid.Row>\n        </Grid>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport 'semantic-ui-css/semantic.min.css';\n\nfunction App() {\n    return (\n        // <FirebaseContext.Provider value={new Firebase()}>\n        <Router>\n            <Switch>\n                {/* <Route path='/profile'>\n            <Profile />\n          </Route>\n          <Route path='/login'>\n            <Login />\n          </Route>\n          <Route path='/signup'>\n            <Signup />\n          </Route> */}\n                <Route path=\"/\">\n                    <Home />\n                </Route>\n            </Switch>\n        </Router>\n        // </FirebaseContext.Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}