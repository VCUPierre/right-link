{"version":3,"sources":["assets/TheRightClickTransparent.png","components/Navbar/Navbar.js","components/Header/Header.js","components/RightLinkManagementOpt/RightLinkManagementOpt.js","components/CustomInput/CustomInputs.js","components/Profile/Profile.js","components/AddLink/AddLink.js","components/SocialLinks/SocialLinks.js","components/RightLinks/RightLinks.js","components/Main/Main.js","components/Home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["StickyBar","position","style","justifyContent","width","boxShadow","zIndex","padding","alignItems","background","textAlign","href","Image","src","Logo","size","centered","display","Header","Navbar","RightLinkManagementOpt","handleEditClick","editRightLink","handleSaveClick","saveRightLink","Button","icon","labelPosition","color","disabled","onClick","Icon","name","StandardInput","field","values","setValue","Input","defaultValue","RightLinkStandardInput","value","SelectInput","setValues","options","Select","onChange","e","RightLinkSelectInput","Profile","data","initialVals","setData","title","titleColor","backgroundImage","image","backgroundImageLink","imageLink","backgroudColor","backgroundCustomColor","customColor","profilePicture","presetColorOptions","key","text","useState","Segment","className","content","target","rel","AddLink","collection","linkGroup","addSocialLink","iconName","link","secondaryColor","surrounded","surroundedInColor","addRightLinkGroup","addRightLink","group","type","linkSpaced","typeAction","internal","featured","featuredText","featuredTimerDate","featuredTimerText","featuredColor","featuredAltStyle","pinned","mainMedia","additionalLinks","colorOveride","fontColor","colored","buttonColor","bannerSide","additionalStyle","modalAlternativeText","removed","bioContent","console","log","socialLinksCopy","socialLinks","push","rightLinksCopy","rightLinks","links","rightLinkGroupsCopy","groups","SocialLinks","activeIndex","setActiveIndex","presetBool","handleClick","titleProps","index","Accordion","styled","map","i","Title","active","Content","RightLinks","showgroup","setShowGroup","rightLinksFilter","setRightLinksFilters","presetBoolOptions","presetSideOptions","presetTypeOptions","handleGroupClick","children","Label","as","Divider","filter","Object","keys","j","includes","Main","panes","menuItem","render","Tab","Pane","menu","fluid","vertical","tabular","Home","setEditRightLink","setSaveRightLink","userData","Grid","columns","Row","previous","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01321730.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/TheRightClickTransparent.45a3cb44.png\";","import React from 'react';\nimport { Image, Icon } from 'semantic-ui-react';\nimport Logo from '../../assets/TheRightClickTransparent.png';\nimport { Link } from 'react-router-dom';\n// import useAuthUser from '../../../Firebase/useAuthUser';\n\nconst LoggedInButtons = () => (\n    <Link to=\"/profile\">\n        <Icon\n            name=\"user circle\"\n            inverted\n            size=\"big\"\n            background=\"white\"\n            style={{ color: '#3972f4', margin: '0 1em' }}\n        />\n    </Link>\n);\n\nconst LoggedOutButtons = () => (\n    <>\n        <Link\n            to=\"/login\"\n            style={{\n                margin: '0 0 0 5%',\n                padding: '.5em',\n                border: '1.5px solid #3972f4',\n                color: '#3972f4',\n                borderRadius: '6px',\n                fontWeight: '600',\n                width: '100px',\n            }}\n        >\n            Log In\n        </Link>\n        <Link\n            to=\"/signup\"\n            style={{\n                margin: '0 0 0 5%',\n                padding: '.5em',\n                background: '#3972f4',\n                color: 'white',\n                borderRadius: '6px',\n                fontWeight: '600',\n                width: '100px',\n            }}\n        >\n            Sign Up\n        </Link>\n    </>\n);\n\nconst StickyBar = ({ position }) => {\n    // const [authUser, loading] = useAuthUser();\n\n    return (\n        <div\n            style={{\n                justifyContent: 'space-between',\n                width: '100%',\n                boxShadow: '0 0 1rem 0 rgba(100,110,140,.4)',\n                zIndex: '2',\n                padding: '1em',\n                alignItems: 'center',\n                background: 'white',\n                textAlign: 'center',\n            }}\n        >\n            <a href=\"/\">\n                <Image src={Logo} size=\"medium\" centered />\n            </a>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'flex-end',\n                    width: '60%',\n                }}\n            >\n                {/* This is where we can put buttons for the sticky nav */}\n                {/* {loading ? null : !!authUser ? (\n          <LoggedInButtons />\n        ) : (\n          <LoggedOutButtons />\n        )} */}\n            </div>\n        </div>\n    );\n};\n\nexport default StickyBar;\n","import React from 'react';\nimport Navbar from '../Navbar/Navbar';\n\nconst Header = () => {\n    return <Navbar />;\n};\n\nexport default Header;\n","import React from 'react';\nimport { Button, Icon } from 'semantic-ui-react';\n\nconst RightLinkManagementOpt = ({\n    handleEditClick,\n    editRightLink,\n    handleSaveClick,\n    saveRightLink,\n}) => {\n    return (\n        <>\n            <Button\n                icon\n                labelPosition=\"left\"\n                color=\"blue\"\n                disabled={editRightLink}\n                onClick={handleEditClick}\n            >\n                <Icon name=\"edit outline\" />\n                Edit\n            </Button>\n            <Button\n                icon\n                labelPosition=\"right\"\n                color=\"green\"\n                disabled={saveRightLink}\n                onClick={handleSaveClick}\n            >\n                Save\n                <Icon name=\"save outline\" />\n            </Button>\n        </>\n    );\n};\n\nexport default RightLinkManagementOpt;\n","import React from 'react';\nimport { Input, Select } from 'semantic-ui-react';\n\nexport const StandardInput = ({ field, values, setValue }) => {\n    return (\n        <Input\n            // label={{ icon: 'asterisk', color: 'teal' }}\n            // labelPosition=\"left corner\"\n            defaultValue={values[field] || ''}\n        />\n    );\n};\n\nexport const RightLinkStandardInput = ({ field, values, setValue }) => {\n    return (\n        <Input\n            // label={{ icon: 'asterisk', color: 'teal' }}\n            // labelPosition=\"left corner\"\n            defaultValue={values[field].value || ''}\n        />\n    );\n};\n\nexport const SelectInput = ({ field, values, setValues, options }) => {\n    const handleChange = (e, { value }) => {\n        setValues({ ...values, [field]: value });\n    };\n\n    return (\n        <Select\n            // label={{ icon: 'asterisk', color: 'teal' }}\n            // labelPosition=\"left corner\"\n            options={options}\n            defaultValue={values[field] || ''}\n            onChange={handleChange}\n        />\n    );\n};\n\nexport const RightLinkSelectInput = ({ field, values, setValue, options }) => {\n    return (\n        <Select\n            // label={{ icon: 'asterisk', color: 'teal' }}\n            // labelPosition=\"left corner\"\n            options={options}\n            defaultValue={values[field].value || ''}\n        />\n    );\n};\n","import React, { useState } from 'react';\nimport { Segment, Header, Input } from 'semantic-ui-react';\n// import { SwatchesPicker } from 'react-color';\nimport { StandardInput, SelectInput } from '../CustomInput/CustomInputs';\n\nconst Profile = ({ editRightLink, data, setData }) => {\n    const initialVals = {\n        title: data.title.title,\n        titleColor: data.title.color,\n        backgroundImage: data.background.image,\n        backgroundImageLink: data.background.imageLink,\n        backgroudColor: data.background.color,\n        backgroundCustomColor: data.background.customColor,\n        profilePicture: data.profilePicture,\n    };\n\n    const presetColorOptions = [\n        { key: 'red', text: 'red', value: 'red' },\n        { key: 'orange', text: 'orange', value: 'orange' },\n        { key: 'yellow', text: 'yellow', value: 'yellow' },\n        { key: 'olive', text: 'olive', value: 'olive' },\n        { key: 'green', text: 'green', value: 'green' },\n        { key: 'teal', text: 'teal', value: 'teal' },\n        { key: 'blue', text: 'blue', value: 'blue' },\n        { key: 'violet', text: 'violet', value: 'violet' },\n        { key: 'purple', text: 'purple', value: 'purple' },\n        { key: 'pink', text: 'pink', value: 'pink' },\n        { key: 'brown', text: 'brown', value: 'brown' },\n        { key: 'grey', text: 'grey', value: 'grey' },\n        { key: 'black', text: 'black', value: 'black' },\n        { key: 'custom', text: 'custom', value: 'custom' },\n    ];\n\n    const presetBool = [\n        { key: 'true', text: 'true', value: true },\n        { key: 'false', text: 'false', value: false },\n    ];\n\n    const [values, setValues] = useState(initialVals);\n\n    return (\n        <Segment className=\"Profile\">\n            <Header content=\"Profile\" />\n            <Segment>\n                <pre>\n                    <b>Title:</b>{' '}\n                    {editRightLink ? (\n                        <StandardInput\n                            field=\"title\"\n                            values={values}\n                            setValues={setValues}\n                        />\n                    ) : values.title ? (\n                        values.title\n                    ) : (\n                        'empty'\n                    )}\n                </pre>\n                <pre>\n                    <b>Title Color:</b>{' '}\n                    {editRightLink ? (\n                        <SelectInput\n                            field=\"titleColor\"\n                            values={values}\n                            setValues={setValues}\n                            options={presetColorOptions}\n                        />\n                    ) : values.titleColor ? (\n                        values.titleColor\n                    ) : (\n                        'empty'\n                    )}\n                </pre>\n            </Segment>\n            <Segment>\n                <pre>\n                    <b>Background Color:</b>{' '}\n                    {editRightLink ? (\n                        <SelectInput\n                            field=\"backgroudColor\"\n                            values={values}\n                            setValues={setValues}\n                            options={presetColorOptions}\n                        />\n                    ) : values.backgroudColor ? (\n                        <p>{`${values.backgroudColor}`}</p>\n                    ) : (\n                        'empty'\n                    )}\n                </pre>\n                {values.backgroudColor === 'custom' ? (\n                    <pre>\n                        <p>\n                            <b>Custom Background Color:</b>\n                            <br />\n                            <a\n                                href=\"https://mycolor.space/gradient3\"\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                            >\n                                Try a Gradiant?\n                                {/* add a hover text (tooltip) to say 'use this link and copy and paste exactly \"css code\" box' */}\n                            </a>\n                            :\n                        </p>\n                        {editRightLink ? (\n                            <StandardInput\n                                field=\"backgroundCustomColor\"\n                                values={values}\n                                setValues={setValues}\n                            />\n                        ) : values.backgroundCustomColor ? (\n                            <p>{`${values.backgroundCustomColor}`}</p>\n                        ) : (\n                            'empty'\n                        )}\n                    </pre>\n                ) : (\n                    ''\n                )}\n                <pre>\n                    <b>Background Image:</b>{' '}\n                    {editRightLink ? (\n                        <SelectInput\n                            field=\"backgroundImage\"\n                            values={values}\n                            setValues={setValues}\n                            options={presetBool}\n                        />\n                    ) : (\n                        `${values.backgroundImage}`\n                    )}\n                </pre>\n                {values.backgroundImage ? (\n                    <pre>\n                        <b>Background Image Link:</b>{' '}\n                        {editRightLink ? (\n                            <StandardInput\n                                field=\"backgroundImageLink\"\n                                values={values}\n                                setValues={setValues}\n                            />\n                        ) : values.backgroundImageLink ? (\n                            <p>{`${values.backgroundImageLink}`}</p>\n                        ) : (\n                            'empty'\n                        )}\n                    </pre>\n                ) : (\n                    ''\n                )}\n            </Segment>\n            <Segment>\n                <pre>\n                    <b>Profile Picture:</b>{' '}\n                    {editRightLink ? (\n                        <StandardInput\n                            field=\"profilePicture\"\n                            values={values}\n                            setValues={setValues}\n                        />\n                    ) : values.profilePicture ? (\n                        <p>{`${values.profilePicture}`}</p>\n                    ) : (\n                        'empty'\n                    )}\n                </pre>\n            </Segment>\n        </Segment>\n    );\n};\n\nexport default Profile;\n","import React from 'react';\nimport { Icon } from 'semantic-ui-react';\nimport './AddLink.css';\n\nconst AddLink = ({ collection, data, setData, linkGroup }) => {\n    const addSocialLink = {\n        name: '',\n        iconName: '',\n        link: '',\n        color: '',\n        secondaryColor: '',\n        surrounded: '',\n        surroundedInColor: '',\n    };\n\n    const addRightLinkGroup = {\n        name: 'New Group',\n        color: 'green',\n    };\n\n    const addRightLink = {\n        group: linkGroup,\n        name: {\n            type: 'text',\n            value: 'New Right Link',\n        },\n        link: {\n            type: 'text',\n            value: '',\n        },\n        linkSpaced: {\n            type: 'bool',\n            value: false,\n        },\n        type: {\n            type: 'typeSelect',\n            value: '',\n        },\n        typeAction: {\n            type: 'text',\n            value: '',\n        },\n        internal: {\n            type: 'bool',\n            value: false,\n        },\n        featured: {\n            type: 'bool',\n            value: false,\n        },\n        featuredText: {\n            type: 'text',\n            value: '',\n        },\n        featuredTimerDate: {\n            type: 'text',\n            value: '',\n        },\n        featuredTimerText: {\n            type: 'text',\n            value: '',\n        },\n        featuredColor: {\n            type: 'colorSelect',\n            value: '',\n        },\n        featuredAltStyle: {\n            type: 'text',\n            value: '',\n        },\n        pinned: {\n            type: 'bool',\n            value: false,\n        },\n        mainMedia: {\n            type: 'obj',\n            value: {},\n        },\n        additionalLinks: {\n            type: 'array',\n            value: [],\n        },\n        color: {\n            type: 'colorSelect',\n            value: '',\n        },\n        colorOveride: {\n            type: 'text',\n            value: '',\n        },\n        fontColor: {\n            type: 'colorSelect',\n            value: '',\n        },\n        colored: {\n            type: 'bool',\n            value: false,\n        },\n        buttonColor: {\n            type: 'colorSelect',\n            value: '',\n        },\n        bannerSide: {\n            type: 'sideSelect',\n            value: '',\n        },\n        additionalStyle: {\n            type: 'text',\n            value: 'longText',\n        },\n        modalAlternativeText: {\n            type: 'obj',\n            value: {\n                removed: false,\n                text: '',\n            },\n        },\n        bioContent: {\n            type: 'array',\n            value: [],\n        },\n    };\n\n    const handleClick = () => {\n        if (collection === 'socialLinks') {\n            console.log('social');\n            const socialLinksCopy = data.socialLinks.group;\n            socialLinksCopy.push(addSocialLink);\n            setData({ ...data, [data.socialLinks.group]: [socialLinksCopy] });\n        }\n        if (collection === 'rightLinks') {\n            console.log('rightlink');\n            const rightLinksCopy = data.rightLinks.links;\n            rightLinksCopy.push(addRightLink);\n            setData({\n                ...data,\n                [data.rightLinks.links]: rightLinksCopy,\n            });\n        }\n        if (collection === 'rightLinksGroups') {\n            console.log('rightlink groups');\n            const rightLinkGroupsCopy = data.rightLinks.groups;\n            rightLinkGroupsCopy.push(addRightLinkGroup);\n            setData({ ...data, [data.rightLinks.groups]: rightLinkGroupsCopy });\n        }\n    };\n\n    return (\n        <Icon\n            color=\"green\"\n            name=\"add square\"\n            size=\"big\"\n            className=\"custom\"\n            link\n            onClick={handleClick}\n        />\n    );\n};\n\nexport default AddLink;\n","import React, { useState } from 'react';\nimport { Segment, Header, Accordion, Icon } from 'semantic-ui-react';\nimport { StandardInput, SelectInput } from '../CustomInput/CustomInputs';\nimport AddLink from '../AddLink/AddLink';\n// import {\n//     // LOGO,\n//     SOCIAL_LINKS,\n// } from '../../assets/data';\nimport './socialLinks.css';\n\nconst SocialLinks = ({ editRightLink, data, setData }) => {\n    const [activeIndex, setActiveIndex] = useState();\n\n    const presetColorOptions = [\n        { key: 'red', text: 'red', value: 'red' },\n        { key: 'orange', text: 'orange', value: 'orange' },\n        { key: 'yellow', text: 'yellow', value: 'yellow' },\n        { key: 'olive', text: 'olive', value: 'olive' },\n        { key: 'green', text: 'green', value: 'green' },\n        { key: 'teal', text: 'teal', value: 'teal' },\n        { key: 'blue', text: 'blue', value: 'blue' },\n        { key: 'violet', text: 'violet', value: 'violet' },\n        { key: 'purple', text: 'purple', value: 'purple' },\n        { key: 'pink', text: 'pink', value: 'pink' },\n        { key: 'brown', text: 'brown', value: 'brown' },\n        { key: 'grey', text: 'grey', value: 'grey' },\n        { key: 'black', text: 'black', value: 'black' },\n        { key: 'custom', text: 'custom', value: 'custom' },\n    ];\n\n    const presetBool = [\n        { key: 'true', text: 'true', value: 'true' },\n        { key: 'false', text: 'false', value: 'false' },\n    ];\n\n    const handleClick = (e, titleProps) => {\n        const { index } = titleProps;\n        const newIndex = activeIndex === index ? -1 : index;\n\n        setActiveIndex(newIndex);\n    };\n\n    return (\n        <Segment className=\"social links\">\n            {console.log('data', data)}\n            <Header content=\"Social Links\" />\n            <Accordion styled>\n                {data.socialLinks.group.map((link, i) => (\n                    <div key={`social link ${i}`}>\n                        <Accordion.Title\n                            active={activeIndex === i}\n                            index={i}\n                            onClick={handleClick}\n                        >\n                            <Icon name=\"dropdown\" />\n                            {`Social Link ${i}`}\n                        </Accordion.Title>\n                        <Accordion.Content active={activeIndex === i}>\n                            <Segment>\n                                <pre>\n                                    <b>name:</b>{' '}\n                                    {editRightLink ? (\n                                        <StandardInput\n                                            field=\"name\"\n                                            values={link}\n                                            // setValues={setValues}\n                                        />\n                                    ) : link.name ? (\n                                        link.name\n                                    ) : (\n                                        'empty'\n                                    )}\n                                </pre>\n                                <pre>\n                                    <b>icon:</b>{' '}\n                                    {editRightLink ? (\n                                        <StandardInput\n                                            field=\"iconName\"\n                                            values={link}\n                                            // setValues={setValues}\n                                        />\n                                    ) : link.iconName ? (\n                                        link.iconName\n                                    ) : (\n                                        'empty'\n                                    )}\n                                </pre>\n                                <pre>\n                                    <b>link:</b>{' '}\n                                    {editRightLink ? (\n                                        <StandardInput\n                                            field=\"link\"\n                                            values={link}\n                                            // setValues={setValues}\n                                        />\n                                    ) : link.link ? (\n                                        link.link\n                                    ) : (\n                                        'empty'\n                                    )}\n                                </pre>\n                                <pre>\n                                    <b>color:</b>{' '}\n                                    {editRightLink ? (\n                                        <SelectInput\n                                            field=\"color\"\n                                            values={link}\n                                            // setValues={setValues}\n                                            options={presetColorOptions}\n                                        />\n                                    ) : link.color ? (\n                                        link.color\n                                    ) : (\n                                        'empty'\n                                    )}\n                                </pre>\n                                <pre>\n                                    <b>secondaryColor:</b>{' '}\n                                    {editRightLink ? (\n                                        <SelectInput\n                                            field=\"secondaryColor\"\n                                            values={link}\n                                            // setValues={setValues}\n                                            options={presetColorOptions}\n                                        />\n                                    ) : link.secondaryColor ? (\n                                        link.secondaryColor\n                                    ) : (\n                                        'empty'\n                                    )}\n                                </pre>\n                                <pre>\n                                    <b>surrounded:</b>{' '}\n                                    {editRightLink ? (\n                                        <SelectInput\n                                            field=\"surrounded\"\n                                            values={link}\n                                            // setValues={setValues}\n                                            options={presetBool}\n                                        />\n                                    ) : link.surrounded ? (\n                                        link.surrounded\n                                    ) : (\n                                        'empty'\n                                    )}\n                                </pre>\n                                <pre>\n                                    <b>surroundedInColor:</b>{' '}\n                                    {editRightLink ? (\n                                        <SelectInput\n                                            field=\"surroundedInColor\"\n                                            values={link}\n                                            // setValues={setValues}\n                                            options={presetBool}\n                                        />\n                                    ) : link.surroundedInColor ? (\n                                        link.surroundedInColor\n                                    ) : (\n                                        'empty'\n                                    )}\n                                </pre>\n                            </Segment>\n                        </Accordion.Content>\n                    </div>\n                ))}\n            </Accordion>\n            <AddLink\n                collection=\"socialLinks\"\n                data={data}\n                setData={setData}\n                linkGroup=\"\"\n            />\n        </Segment>\n    );\n};\n\nexport default SocialLinks;\n","import React, { useState } from 'react';\nimport {\n    Segment,\n    Header,\n    Accordion,\n    Icon,\n    Label,\n    Divider,\n} from 'semantic-ui-react';\nimport {\n    StandardInput,\n    SelectInput,\n    RightLinkStandardInput,\n    RightLinkSelectInput,\n} from '../CustomInput/CustomInputs';\nimport AddLink from '../AddLink/AddLink';\n// import { LINK_GROUP_1 } from '../../assets/data';\nimport './rightLinks.css';\n\nconst RightLinks = ({ editRightLink, data, setData }) => {\n    const [activeIndex, setActiveIndex] = useState();\n    const [showgroup, setShowGroup] = useState(false);\n    const [rightLinksFilter, setRightLinksFilters] = useState('');\n\n    const presetColorOptions = [\n        { key: 'red', text: 'red', value: 'red' },\n        { key: 'orange', text: 'orange', value: 'orange' },\n        { key: 'yellow', text: 'yellow', value: 'yellow' },\n        { key: 'olive', text: 'olive', value: 'olive' },\n        { key: 'green', text: 'green', value: 'green' },\n        { key: 'teal', text: 'teal', value: 'teal' },\n        { key: 'blue', text: 'blue', value: 'blue' },\n        { key: 'violet', text: 'violet', value: 'violet' },\n        { key: 'purple', text: 'purple', value: 'purple' },\n        { key: 'pink', text: 'pink', value: 'pink' },\n        { key: 'brown', text: 'brown', value: 'brown' },\n        { key: 'grey', text: 'grey', value: 'grey' },\n        { key: 'black', text: 'black', value: 'black' },\n        { key: 'custom', text: 'custom', value: 'custom' },\n    ];\n\n    const presetBoolOptions = [\n        { key: 'true', text: 'true', value: 'true' },\n        { key: 'false', text: 'false', value: 'false' },\n    ];\n\n    const presetSideOptions = [\n        { key: 'none', text: 'none', value: 'none' },\n        { key: 'left', text: 'left', value: 'left' },\n        { key: 'right', text: 'right', value: 'right' },\n    ];\n\n    const presetTypeOptions = [\n        { key: 'internal', text: 'internal', value: 'internal' },\n        { key: 'external', text: 'external', value: 'external' },\n        { key: 'item', text: 'item', value: 'item' },\n        {\n            key: 'still/external',\n            text: 'still/external',\n            value: 'still/external',\n        },\n        { key: 'slideshow', text: 'slideshow', value: 'slideshow' },\n        { key: 'bio', text: 'bio', value: 'bio' },\n    ];\n\n    const handleClick = (e, titleProps) => {\n        const { index } = titleProps;\n        const newIndex = activeIndex === index ? -1 : index;\n\n        setActiveIndex(newIndex);\n    };\n\n    const handleGroupClick = (e, data) => {\n        // console.log('groupState', rightLinksFilter);\n        // console.log('groupClick', data);\n        setShowGroup(true);\n        setRightLinksFilters(`${data.children[1]}`);\n    };\n\n    return (\n        <Segment className=\"LinkGroup 1\">\n            {console.log('data', data)}\n            <div>\n                {data.rightLinks.groups.map((group, i) => {\n                    return (\n                        <Label\n                            key={`group label ${i}`}\n                            as=\"a\"\n                            image\n                            className=\"linkLabels\"\n                            color={group.color}\n                            onClick={handleGroupClick}\n                        >\n                            <Icon name=\"linkify\" />\n                            {group.name}\n                        </Label>\n                    );\n                })}\n                <AddLink\n                    collection=\"rightLinksGroups\"\n                    data={data}\n                    setData={setData}\n                    linkGroup=\"\"\n                />\n            </div>\n            <Divider />\n            <Header content=\"Link Group\" />\n            {showgroup ? (\n                <>\n                    <Segment>\n                        <pre>\n                            <b>Group Name:</b>{' '}\n                            {editRightLink ? (\n                                <StandardInput\n                                    field=\"groupName\"\n                                    values={data.rightLinks.groups.filter(\n                                        (group) =>\n                                            group.name === rightLinksFilter\n                                    )}\n                                    // setValues={setValues}\n                                />\n                            ) : data.rightLinks.groups.filter(\n                                  (group) => group.name === rightLinksFilter\n                              )[0].name ? (\n                                data.rightLinks.groups.filter(\n                                    (group) => group.name === rightLinksFilter\n                                )[0].name\n                            ) : (\n                                'empty'\n                            )}\n                        </pre>\n                    </Segment>\n                    <Segment>\n                        <pre>\n                            <b>Group Color:</b>\n                            {editRightLink ? (\n                                <SelectInput\n                                    field=\"groupColor\"\n                                    values={data.rightLinks.groups.filter(\n                                        (group) =>\n                                            group.name === rightLinksFilter\n                                    )}\n                                    // setValues={setValues}\n                                    options={presetColorOptions}\n                                />\n                            ) : data.rightLinks.groups.filter(\n                                  (group) => group.name === rightLinksFilter\n                              )[0].color ? (\n                                data.rightLinks.groups.filter(\n                                    (group) => group.name === rightLinksFilter\n                                )[0].color\n                            ) : (\n                                'empty'\n                            )}\n                        </pre>\n                    </Segment>\n                    <Accordion styled>\n                        {data.rightLinks.links.map((link, i) => {\n                            return link.group === rightLinksFilter ? (\n                                <div key={`RightLink-${i}`}>\n                                    {/* <Header content={`Link ${i + 1}`} /> */}\n                                    <Accordion.Title\n                                        active={activeIndex === i}\n                                        index={i}\n                                        onClick={handleClick}\n                                    >\n                                        <Icon name=\"dropdown\" />\n                                        {`${link.name.value}`}\n                                    </Accordion.Title>\n                                    {Object.keys(link).map((key, j) => {\n                                        // console.log('link', link, 'key', key);\n                                        return (\n                                            <Accordion.Content\n                                                active={activeIndex === i}\n                                                key={`RightLink-content-${j}`}\n                                            >\n                                                <Segment>\n                                                    <pre>\n                                                        <b>{`${key}:`}</b>{' '}\n                                                        {editRightLink ? (\n                                                            link[key].type ===\n                                                            'text' ? (\n                                                                <RightLinkStandardInput\n                                                                    field={`${key}`}\n                                                                    values={\n                                                                        link\n                                                                    }\n                                                                />\n                                                            ) : link[key]\n                                                                  .type ===\n                                                              'bool' ? (\n                                                                <RightLinkStandardInput\n                                                                    field={`${key}`}\n                                                                    values={\n                                                                        link\n                                                                    }\n                                                                    options={\n                                                                        presetBoolOptions\n                                                                    }\n                                                                />\n                                                            ) : link[key]\n                                                                  .type ===\n                                                              'typeSelect' ? (\n                                                                <RightLinkStandardInput\n                                                                    field={`${key}`}\n                                                                    values={\n                                                                        link\n                                                                    }\n                                                                    options={\n                                                                        presetTypeOptions\n                                                                    }\n                                                                />\n                                                            ) : link[key]\n                                                                  .type ===\n                                                              'colorSelect' ? (\n                                                                <RightLinkSelectInput\n                                                                    field={`${key}`}\n                                                                    values={\n                                                                        link\n                                                                    }\n                                                                    options={\n                                                                        presetColorOptions\n                                                                    }\n                                                                />\n                                                            ) : link[key]\n                                                                  .type ===\n                                                              'sideSelect' ? (\n                                                                <RightLinkSelectInput\n                                                                    field={`${key}`}\n                                                                    values={\n                                                                        link\n                                                                    }\n                                                                    options={\n                                                                        presetSideOptions\n                                                                    }\n                                                                />\n                                                            ) : link[key]\n                                                                  .type ===\n                                                              'obj' ? (\n                                                                'objectComing soon'\n                                                            ) : link[key]\n                                                                  .type ===\n                                                              'array' ? (\n                                                                'arrayComming soon'\n                                                            ) : (\n                                                                'field not valid'\n                                                            )\n                                                        ) : [\n                                                              'array',\n                                                              'obj',\n                                                          ].includes(\n                                                              link[key].type\n                                                          ) ? (\n                                                            'obj or array'\n                                                        ) : link[key].value ? (\n                                                            link[key].value\n                                                        ) : (\n                                                            'empty'\n                                                        )}\n                                                    </pre>\n                                                </Segment>\n                                            </Accordion.Content>\n                                        );\n                                    })}\n                                </div>\n                            ) : (\n                                ''\n                            );\n                        })}\n                    </Accordion>\n                </>\n            ) : (\n                'Please select one from above or add a new group for your Right-Links'\n            )}\n            <div>\n                <AddLink\n                    collection=\"rightLinks\"\n                    data={data}\n                    setData={setData}\n                    linkGroup={rightLinksFilter}\n                />\n            </div>\n        </Segment>\n    );\n};\n\nexport default RightLinks;\n","import React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport ProfileSection from '../Profile/Profile';\nimport SocialLinks from '../SocialLinks/SocialLinks';\nimport RightLinks from '../RightLinks/RightLinks';\nimport './main.css';\n\nconst Main = ({ editRightLink, data, setData }) => {\n    const panes = [\n        {\n            menuItem: 'Profile',\n            render: () => (\n                <Tab.Pane>\n                    <ProfileSection\n                        editRightLink={editRightLink}\n                        data={data}\n                        setData={setData}\n                    />\n                </Tab.Pane>\n            ),\n        },\n        {\n            menuItem: 'Social Links',\n            render: () => (\n                <Tab.Pane>\n                    <SocialLinks\n                        editRightLink={editRightLink}\n                        data={data}\n                        setData={setData}\n                    />\n                </Tab.Pane>\n            ),\n        },\n        {\n            menuItem: 'Links',\n            render: () => (\n                <Tab.Pane>\n                    <RightLinks\n                        editRightLink={editRightLink}\n                        data={data}\n                        setData={setData}\n                    />\n                </Tab.Pane>\n            ),\n        },\n        {\n            menuItem: 'Preview',\n            render: () => <Tab.Pane>{/* <Preview /> */}</Tab.Pane>,\n        },\n    ];\n\n    return (\n        <div className=\"containerSize mainContainer\">\n            <Tab\n                menu={{ fluid: true, vertical: true, tabular: true }}\n                panes={panes}\n            />\n        </div>\n    );\n};\n\nexport default Main;\n","import React, { useDebugValue, useState } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport Header from '../Header/Header';\nimport RightLinkManagementOpt from '../RightLinkManagementOpt/RightLinkManagementOpt';\nimport Main from '../Main/Main';\n// import {\n//     TITLE,\n//     LOGO,\n//     PROFILE_PIC,\n//     BACKGROUND,\n//     SOCIAL_LINKS,\n//     LINK_GROUP_1,\n// } from '../../assets/data';\nimport userData from '../../assets/data.json';\nimport './Home.css';\n\nconst Home = () => {\n    const [editRightLink, setEditRightLink] = useState(false);\n    const [saveRightLink, setSaveRightLink] = useState(true);\n    const [data, setData] = useState(userData);\n\n    const handleEditClick = () => {\n        console.log('edit click');\n        setEditRightLink((previous) => !previous);\n        setSaveRightLink((previous) => !previous);\n    };\n\n    const saveData = () => {\n        setEditRightLink((previous) => !previous);\n        setSaveRightLink((previous) => !previous);\n        console.log('save Data');\n    };\n    const handleSaveClick = () => {\n        // setSaveRightLink()\n        console.log('save click');\n        saveData();\n    };\n\n    return (\n        <Grid columns={2}>\n            <Grid.Row centered>\n                <Header />\n            </Grid.Row>\n            <Grid.Row className=\"RLContentRight\">\n                <RightLinkManagementOpt\n                    handleEditClick={handleEditClick}\n                    editRightLink={editRightLink}\n                    handleSaveClick={handleSaveClick}\n                    saveRightLink={saveRightLink}\n                />\n            </Grid.Row>\n            <Grid.Row centered>\n                <Main\n                    editRightLink={editRightLink}\n                    data={data}\n                    setData={setData}\n                />\n            </Grid.Row>\n        </Grid>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport 'semantic-ui-css/semantic.min.css';\n\nfunction App() {\n    return (\n        // <FirebaseContext.Provider value={new Firebase()}>\n        <Router>\n            <Switch>\n                {/* <Route path='/profile'>\n            <Profile />\n          </Route>\n          <Route path='/login'>\n            <Login />\n          </Route>\n          <Route path='/signup'>\n            <Signup />\n          </Route> */}\n                <Route path=\"/\">\n                    <Home />\n                </Route>\n            </Switch>\n        </Router>\n        // </FirebaseContext.Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}